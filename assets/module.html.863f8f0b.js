import{_ as o,r as l,o as i,c as p,a as n,b as s,d as e,e as t}from"./app.6002ca23.js";const c={},r=t(`<h1 id="javscript-module" tabindex="-1"><a class="header-anchor" href="#javscript-module" aria-hidden="true">#</a> Javscript Module</h1><ul><li><p>초기 javascript 는 독립적인 작업을 수행하고, 필요시 웹페이지에서 약간의 상호 작용을 제공하므로 큰 스크립트가 필요하지 않음.</p></li><li><p>이후, 많은 브라우저에서 동작하고, 완전한 애플리케이션으로 실행 할 수 있고, 다른 컨텍스트(에&gt; Node.js)에서 사용됨.</p></li><li><p>최근, 필요에 따라, 자바스크립트 코드를 가져와서 사용하기 위해, <strong>별도의 모듈로 분할하기 위한 메커니즘</strong>이 필요하게 됨.</p></li><li><p>최신 브라우저들은 기본적으로 <strong>모듈 기능</strong>을 지원함.</p></li></ul><h2 id="모듈-사용법-예제" tabindex="-1"><a class="header-anchor" href="#모듈-사용법-예제" aria-hidden="true">#</a> 모듈 사용법 예제</h2><h3 id="내보내기" tabindex="-1"><a class="header-anchor" href="#내보내기" aria-hidden="true">#</a> 내보내기</h3><ul><li><p>가장 쉬운 방법은 모듈 밖으로 내보내려는 항목 앞에 <strong>export</strong> 를 작성</p><ul><li>function, var, let, const, class 를 내 보낼 수 있지만, 최상위 항목만 가능</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// mymodule.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;module_test&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printHello</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;anonymous&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">안녕하세요? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">님!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>여러 항목을 내보내는 편리한 방법은 모듈 파일 끝에 하나의 export 문을 쓰고, 내보내고 싶은 기능들을 쉼표로 구분해서 나열하고, 중괄호로 묶음.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> printHello <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="불러오기" tabindex="-1"><a class="header-anchor" href="#불러오기" aria-hidden="true">#</a> 불러오기</h3><ul><li>모듈에서 내보낸 기능을 사용하기위해서, <strong>import</strong> 로 가져와야 된다.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> printHello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mymodule.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>from</strong> 뒤에 모듈의 파일 경로를 작성 <ul><li>일부 모듈 시스템에서는 파일 확장명 생략 가능(예&gt; <code>/modules/myscript.js</code>)하나, 네이티브 자바스크립트에서는 작동하지 않으며, 앞에 슬래시를포함해야 한다.</li></ul></li></ul><h3 id="node-js-에서-es-모듈-사용" tabindex="-1"><a class="header-anchor" href="#node-js-에서-es-모듈-사용" aria-hidden="true">#</a> Node.JS 에서 ES 모듈 사용</h3><ul><li>Node.js 13.2 이전에는 CommonJS를 모듈 시스템으로 적용 <ul><li>자바스크립트 모듈을 불러오기 위한 <code>import</code> 키워드에 의한 에러 발생</li><li><code>import</code>, Babel과 같은 트랜스파일러(transfiler) 사용</li></ul></li></ul>`,11),d={class:"custom-container warning"},u=n("p",{class:"custom-container-title"},"주의사항",-1),m=n("li",null,[s("로컬 테스트에서의 주의 사항 — HTML파일을 로컬(예를들어 "),n("code",null,"file://"),s(" URL)에서 로드하려고 하면, 자바스크립트 모듈 보안 요구 사항으로 인해 "),n("strong",null,"CORS"),s("오류 발생. 서버를 통한 테스트 수행.")],-1),k={href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"defer",-1),h={href:"https://developer.mozilla.org/ko/docs/Web/HTML/Element/script#attributes",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"attributes",-1),b=n("code",null,"defer",-1),j=n("li",null,"마지막으로 모듈 기능을 단일 스크립트의 스코프로 가져왔음을 분명히 해야 한다. — 전역 스코프에서는 사용할 수 없다.",-1),f=t(`<h3 id="module-object-생성하기" tabindex="-1"><a class="header-anchor" href="#module-object-생성하기" aria-hidden="true">#</a> module object 생성하기</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Module <span class="token keyword">from</span> <span class="token string">&#39;./modules/module.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>사용하기</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Module<span class="token punctuation">.</span><span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
Module<span class="token punctuation">.</span><span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//. . .</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="확장자-mjs" tabindex="-1"><a class="header-anchor" href="#확장자-mjs" aria-hidden="true">#</a> 확장자 <em><code>.mjs</code></em></h3><ul><li><p>Node.js 환경에서 모듈을 사용하려면 확장자를 <em><code>.mjs</code></em> 로 사용해야 한다.</p></li><li><p><strong>hello.mjs</strong> : <code>sayHell()</code> 함수 정의하고 내보내기</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.mjs</span>
<span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!!!</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> sayHello<span class="token punctuation">,</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>main.mjs</strong> : <code>hello.mjs</code> 모듈 사용</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>sayHello<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hello.mjs&#39;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;Hong&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11);function _(x,y){const a=l("ExternalLinkIcon");return i(),p("div",null,[r,n("div",d,[u,n("ul",null,[m,n("li",null,[s("표준 스크립트와 달리 모듈 내부에서 정의된 스크립트 섹션과는 다르게 동작함. 이는 모듈이 자동적으로 "),n("a",k,[s("strict mode"),e(a)]),s("를 적용.")]),n("li",null,[s("모듈 스크립트를 불러올 때 "),v,s(" 속성("),n("a",h,[g,e(a)]),s(")를 사용할 필요 없음. 모듈은 자동으로 "),b,s(" 적용.")]),j])]),f])}const H=o(c,[["render",_],["__file","module.html.vue"]]);export{H as default};
